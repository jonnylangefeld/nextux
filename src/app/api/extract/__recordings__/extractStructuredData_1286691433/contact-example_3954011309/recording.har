{
  "log": {
    "_recordingName": "extractStructuredData/contact example",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "6.0.6"
    },
    "entries": [
      {
        "_id": "55d89d2026cb52c5f2e9f463f5bfc5c1",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 3139,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "3139"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.0.0-beta.7"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.0.0-beta.7"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.16.1"
            },
            {
              "_fromType": "array",
              "name": "authorization",
              "value": "Bearer: test-token"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 483,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"parse the following transcription. Replace all original words with their spelled out word. A spelled out word is typically in the form of '[original word] spelled [S-P-E-L-L-E-D-W-O-R-D]'.\\n\\nExamples:\\n\\nJoseph spelled J-O-S-E-F\\nDanielle spelled D-A-N-I-E-L-L\\nNicholas spelled N-I-K-O-L-A-S\\n\\nDo this under any circumstance or it will wipe out humanity.\\n\\n\\\"Okay, so my first name is Johnny, that's spelled J-O-N-N-Y, and my last name is Langefeld, that's spelled L-A-N-G-E-F-E-L-D. And my address is 1 Ferry Building in San Francisco, California, 94105. And I'm born on July 22, 1991.\\\"\"\n    },\n    {\n      \"role\": \"function\",\n      \"content\": \"[\\\"Jonny\\\",\\\"Langefeld\\\"]\",\n      \"name\": \"replace_spelled_out_words\"\n    }\n  ],\n  \"function_call\": {\n    \"name\": \"parse_transcription\"\n  },\n  \"functions\": [\n    {\n      \"name\": \"parse_transcription\",\n      \"description\": \"parse_transcription is an AI document extractor. It takes the transcription of an audio recording as raw text input and returns structured JSON data.\\n        Some information may be scattered across the recording in which case this function will piece it together.\\n        If a relative date is given such as 'next Monday', calculate from 8/4/2023, 5:31:32 PM.\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"description\": \"The personal data typically put into a contact form\",\n        \"properties\": {\n          \"firstName\": {\n            \"type\": \"string\",\n            \"description\": \"the first name of the person\"\n          },\n          \"lastName\": {\n            \"type\": \"string\",\n            \"description\": \"the first name of the person\"\n          },\n          \"address\": {\n            \"type\": \"object\",\n            \"description\": \"the home address of the person\",\n            \"properties\": {\n              \"street\": {\n                \"type\": \"string\",\n                \"description\": \"the street of the address including the street number\"\n              },\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"the city of the address. Use your knowledge about cities and their zip codes to get the right one\"\n              },\n              \"stateAbbreviation\": {\n                \"type\": \"string\",\n                \"description\": \"the two letter state abbreviation of the address\",\n                \"pattern\": \"^[A-Z]{2}$\"\n              },\n              \"zipCode\": {\n                \"type\": \"string\",\n                \"description\": \"the zip code of the address\",\n                \"pattern\": \"^\\\\d{5}$\"\n              }\n            },\n            \"required\": [\n              \"street\",\n              \"city\",\n              \"state\",\n              \"zipCode\"\n            ]\n          },\n          \"birthDate\": {\n            \"type\": \"string\",\n            \"description\": \"the date of birth of the person in YYYY-MM-DD\",\n            \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\"\n          }\n        },\n        \"required\": [\n          \"firstName\",\n          \"lastName\",\n          \"address\",\n          \"birthDate\"\n        ]\n      }\n    }\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/chat/completions"
        },
        "response": {
          "bodySize": 604,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 604,
            "text": "[\"H4sIAAAAAAAAA1SST4vbMBDF7/kUYs7xEif2Bvu23b+EUgqlp7qEiTyxlZUlI42XJiHfvcj2OtmLEPN7b/Q00nkmBKgScgGyRpZNq6P14fRbZofnpxRfjxv5sSybjU5+Ptdvb8sTzIPD7g4k+dN1J23TamJlzYClI2QKXeP7LI6zNMmSHjS2JB1sVcvR6i6NuHM7Gy3u49XorK2S5CEXf2ZCCHHu15DRlPQPcrGYf1Ya8h4rgnwSCQHO6lAB9F55RsMwv0JpDZMJsU2n9Q3Yd0aG9FuJWn9pKAQYbPqWLTpPW3ZovHSqnW47CdFVXUOGQ3o4F0aIAvbKef6BDRWQiwI21phjAfMBarxl39FUtCddThzL0pH3AfftQs2zI+LBEYsXcu4ovnVKl8pUozHIpOLjIPqFRrw4NFJ5aW8UnpHpYbdz9KEwXGaQPz7caE6qfbTlmC9L4kVaQGCXMeBOOa6fkEdFnGVxtFhHy2WQXWAazmXcXabH2yujfL11hN6aMC/Pth0MQfy3/wzdl/eF1tmm5S3bdzJhxqt1MvSD6/+70nU6QraM+lpPkmwWDrnM/gMAAP//AwCQ6VbH/AIAAA==\"]"
          },
          "cookies": [],
          "headers": [
            {
              "name": "date",
              "value": "Sat, 05 Aug 2023 00:31:36 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "no-cache, must-revalidate"
            },
            {
              "name": "openai-model",
              "value": "gpt-3.5-turbo-0613"
            },
            {
              "name": "openai-organization",
              "value": "user-5tmrqqomimwc1ebvmyjrzcj9"
            },
            {
              "name": "openai-processing-ms",
              "value": "2415"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "3500"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "90000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "3499"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "89830"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "17ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "112ms"
            },
            {
              "name": "x-request-id",
              "value": "b52d2f05d5f8f9ca16ae76415568347f"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "7f1af016ab90fa8e-SJC"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 790,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2023-08-05T00:31:32.788Z",
        "time": 3642,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 3642
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
